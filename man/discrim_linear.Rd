% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/discrim_lin.R
\name{discrim_linear}
\alias{discrim_linear}
\alias{update.discrim_linear}
\title{General Interface for Linear Discriminant Models}
\usage{
discrim_linear(mode = "classification", penalty = NULL)

\method{update}{discrim_linear}(object, penalty = NULL, fresh = FALSE,
  ...)
}
\arguments{
\item{mode}{A single character string for the type of model.
The only possible value for this model is "classification".}

\item{penalty}{An non-negative number representing the
amount of regularization used by some of the engines.}

\item{object}{A linear discriminant model specification.}
}
\description{
\code{discrim_linear()} is a way to generate a \emph{specification} of a model
before fitting and allows the model to be created using
different packages in R. The main
arguments for the model are:
\itemize{
\item \code{penalty}: The total amount of regularization
in the model. Note that this only used for the "FDA" engine where it is a
pure L2 penalty (a.k.a ridge regression).
}
These arguments are converted to their specific names at the
time that the model is fit. Other options and argument can be
set using \code{set_engine()}. If left to their defaults
here (\code{NULL}), the values are taken from the underlying model
functions. If parameters need to be modified, \code{update()} can be used
in lieu of recreating the object from scratch.
}
\details{
For \code{discrim_linear()}, the mode will always be "classification".

The model can be created using the \code{fit()} function using the
following \emph{engines}:
\itemize{
\item \pkg{R}:  \code{"MASS"}(the default) or \code{"FDA"}
}
}
\section{Engine Details}{


Engines may have pre-set default arguments when executing the
model fit call.  For this type of
model, the template of the fit calls are:

\pkg{MASS}

\preformatted{
MASS::lda(x = missing_arg(), grouping = missing_arg())
}

\pkg{FDA}

\preformatted{
mda::fda(formula = missing_arg(), data = missing_arg(), lambda = penalty,
         method = mda::gen.ridge, keep.fitted = FALSE)
}
}

\examples{
discrim_linear()
model <- discrim_linear(penalty = 0.1)
model
update(model, penalty = 1)
update(model, penalty = 1, fresh = TRUE)
}
